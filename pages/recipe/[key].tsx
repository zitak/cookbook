import Head from "next/head"
import styles from "../../styles/Home.module.css"
import { Ingredient, IngredientJson, Recipe } from "../../types/recipe"
import { getAllRecipes, getRecipe } from "../../lib/recipes"

interface Props {
  recipe: Recipe
}

const Recipe = ({ recipe }: Props) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>{`CookBook | ${recipe.title}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{recipe.title}</h1>
        <IngredientBox ingredients={recipe.ingredients} />
      </main>

      <footer className={styles.footer}></footer>
    </div>
  )
}

export default Recipe

interface IngredientBoxProps {
  ingredients: IngredientJson
}

const IngredientBox = ({ ingredients }: IngredientBoxProps) => {
  return (
    <div>
      <h3>Ingredients</h3>
      {ingredients.type === 1 ? (
        <IngredientList list={ingredients.data} />
      ) : (
        ingredients.data.map((item) => {
          return (
            <IngredientList
              key={item.name}
              list={item.ingredients}
              name={item.name}
            />
          )
        })
      )}
    </div>
  )
}

interface IngredientListProps {
  list: Ingredient[]
  name?: string
}

const IngredientList = ({ list, name }: IngredientListProps) => {
  return (
    <div>
      {name && <h5>{name}</h5>}
      <ul>
        {list.map((item) => (
          <li key={item.name}>{`${item.amount ?? ""} ${item.unit ?? ""} ${
            item.name
          }`}</li>
        ))}
      </ul>
    </div>
  )
}

type Params = {
  params: {
    key: string
  }
}

export const getStaticProps = async ({ params }: Params) => {
  const recipe: Recipe = getRecipe(params.key)
  return {
    props: {
      recipe: recipe,
    },
  }
}

export async function getStaticPaths() {
  const recipes: Array<Recipe> = getAllRecipes()
  return {
    paths: recipes.map((recipe) => {
      return {
        params: {
          key: recipe.key,
        },
      }
    }),
    fallback: false,
  }
}
